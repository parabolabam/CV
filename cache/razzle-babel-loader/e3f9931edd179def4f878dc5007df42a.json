{"ast":null,"code":"var _jsxFileName = \"/home/vsorokin/github/react/vsorokin-cv/src/components/Expandable/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\n\nfunction CollapsedContent({\n  handleCollapse,\n  altForExpandButton\n}) {\n  return __jsx(\"span\", {\n    onClick: handleCollapse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 10\n    }\n  }, \"\\uD83D\\uDC47 \", altForExpandButton);\n}\n\nfunction ExpandedContent({\n  handleCollapse,\n  children\n}) {\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    onClick: handleCollapse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }, \"\\u261D Collapse\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, children));\n}\n\nexport function Expandable({\n  isInitiallyCollapsed = true,\n  altForExpandButton = \"More\",\n  altForCollapseButton = \"Less\",\n  children\n}) {\n  const {\n    0: isCollapsed,\n    1: setIsCollapsed\n  } = useState(isInitiallyCollapsed);\n\n  const handleCollapse = () => setIsCollapsed(!isCollapsed);\n\n  if (isCollapsed) {\n    return __jsx(CollapsedContent, {\n      altForExpandButton: altForExpandButton,\n      handleCollapse: handleCollapse,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    });\n  } else {\n    return __jsx(ExpandedContent, {\n      altForCollapseButton: altForCollapseButton,\n      handleCollapse: handleCollapse,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, children);\n  }\n}","map":{"version":3,"sources":["/home/vsorokin/github/react/vsorokin-cv/src/components/Expandable/index.js"],"names":["useState","CollapsedContent","handleCollapse","altForExpandButton","ExpandedContent","children","Expandable","isInitiallyCollapsed","altForCollapseButton","isCollapsed","setIsCollapsed"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,gBAAT,CAA0B;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAA1B,EAAkE;AAChE,SAAO;AAAM,IAAA,OAAO,EAAED,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAmCC,kBAAnC,CAAP;AACD;;AAED,SAASC,eAAT,CAAyB;AAAEF,EAAAA,cAAF;AAAkBG,EAAAA;AAAlB,CAAzB,EAAuD;AACrD,SACE,4BACE;AAAK,IAAA,OAAO,EAAEH,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMG,QAAN,CAFF,CADF;AAMD;;AAED,OAAO,SAASC,UAAT,CAAoB;AACzBC,EAAAA,oBAAoB,GAAG,IADE;AAEzBJ,EAAAA,kBAAkB,GAAG,MAFI;AAGzBK,EAAAA,oBAAoB,GAAG,MAHE;AAIzBH,EAAAA;AAJyB,CAApB,EAKJ;AACD,QAAM;AAAA,OAACI,WAAD;AAAA,OAAcC;AAAd,MAAgCV,QAAQ,CAACO,oBAAD,CAA9C;;AAEA,QAAML,cAAc,GAAG,MAAMQ,cAAc,CAAC,CAACD,WAAF,CAA3C;;AAEA,MAAIA,WAAJ,EAAiB;AACf,WACE,MAAC,gBAAD;AACE,MAAA,kBAAkB,EAAEN,kBADtB;AAEE,MAAA,cAAc,EAAED,cAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAMD,GAPD,MAOO;AACL,WACE,MAAC,eAAD;AACE,MAAA,oBAAoB,EAAEM,oBADxB;AAEE,MAAA,cAAc,EAAEN,cAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIGG,QAJH,CADF;AAQD;AACF","sourcesContent":["import { useState } from \"react\";\n\nfunction CollapsedContent({ handleCollapse, altForExpandButton }) {\n  return <span onClick={handleCollapse}>üëá {altForExpandButton}</span>;\n}\n\nfunction ExpandedContent({ handleCollapse, children }) {\n  return (\n    <>\n      <div onClick={handleCollapse}>‚òù Collapse</div>\n      <div>{children}</div>\n    </>\n  );\n}\n\nexport function Expandable({\n  isInitiallyCollapsed = true,\n  altForExpandButton = \"More\",\n  altForCollapseButton = \"Less\",\n  children,\n}) {\n  const [isCollapsed, setIsCollapsed] = useState(isInitiallyCollapsed);\n\n  const handleCollapse = () => setIsCollapsed(!isCollapsed);\n\n  if (isCollapsed) {\n    return (\n      <CollapsedContent\n        altForExpandButton={altForExpandButton}\n        handleCollapse={handleCollapse}\n      />\n    );\n  } else {\n    return (\n      <ExpandedContent\n        altForCollapseButton={altForCollapseButton}\n        handleCollapse={handleCollapse}\n      >\n        {children}\n      </ExpandedContent>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}